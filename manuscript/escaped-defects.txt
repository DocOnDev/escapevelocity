### Escaped Defects

Escaped defects are defects in the system that managed to get into production.
They've escaped the confines of the team and are now wreaking havoc in public.

An escaped defect is an indication of systemic failure.
The systems we have in place for delivering software should prevent defects from
getting into production.

Code is written in pairs, written in mobs, or reviewed via pull requests.
It is possible you like to self-impose bottlenecks and prefer late feedback, so
you're still using some formal code review meeting.
But it is unlikely code moves without any form of peer review.
Right?

Unit and acceptance/regression tests are being written around the code you add
or change.
Developers are each running these tests dozens of times per day, if not more often.
The continuous integration server runs these tests for every check-in, which is
also multiple times per day.
The team does a stop-drop-and-roll if the build is broken - including if tests fail.
Right?

The majority of people I talk to state that defect free code is impossible.
I've read arguments about how the operating system and hardware controllers are
not defect free, therefor anything written on top of them will also have defects.

I've experienced the reality of bugs in the operating system impacting our software.
I had a client that asked us to write a system that routed forms to varying
printer locations based on where the recipient was located within the building.
This was for a medical center prior to smart phones and they wanted to get
paperwork and messages to doctors as fast as possible.
So we wrote a system that integrated with both the scheduling system and the
keycard security system to determine where doctors were at any given time.
Messages targeted for the doctor would then route to the nearest printer and
be placed in pickup bins for internal couriers to deliver.

The night before we went live, the company's Tech Department rolled out an update
to Microsoft Windows.
The launch was less than spectacular.
The first message was keyed in, minutes went by, but no report on the printer.
"You need to fix this.", the client told me.

We ran a print job from Microsoft Word.
No problem.
Then we rant a report in the medical records system.
No job on the printer.

"It appears to be an issue with the printer drivers.", we told the client.

"Nope.", the responded, "Everything was fine until you installed your software."

We ran a medical systems report from a system that didn't have our software
installed on it.
No job on the printer.

"It is not our software.", we said.

"Not our problem. You were hired to write software that works. Your software
doesn't work. We won't pay you the remaining balance."

So we looked deeper and it turned out that the Windows update was rolled out
with an invalid initialization file for Windows.
Any piece of software that relied on the Operating System for printing would fail.
Microsoft Office products, at that time, worked off of their own configurations.
We updated the printer configurations, showed their team what we'd done and rolled
out the updates.
Take two - the jobs routed and everyone was happy.





For a while.

Three weeks later, we got another call from the customer.
Some messages were not making it to the target printer.
Would we please come in and take a look.
That is, if we want to get paid.

This time, it was a little more difficult to figure out.
After some research and testing, we determined that the issue was a flaw in the
Novell network operating system.
Approximately one print job in every 100,000 would report success, but never
actually print.
Our application was working fine.
Windows was working fine.
The network operating system was broken and reporting false positives.

We delivered the analysis and links to the Novell documentation showing the patch
would be in the next release of their operating system.
Of course, the medical center was intentionally behind on releases, so they
wouldn't see the patch for at least another six months.

"Fix it.", was the word from the client.

So, much to our dismay, we added a confirmation feature to the software.
For each job, a print confirmation was routed to a workstation near the printer.
Now, before the job was placed in the pick-up box, someone had to acknowledge
receipt.
For any given job, if the job prior and after were both acknowledged, we sent it
again.

Fixed.
I guess.
