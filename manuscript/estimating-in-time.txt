## Estimating in Time

Estimates.
Do we even need them?

To many, this seems a ridiculous question.
You can't plan if you don't have estimates, right?
You can't decide if a project should be started until you know the cost and you
can't know the cost until you know the duration and you can't know the duration
until you estimate how long the steps will take.
It's logical.

So we estimate.

As we want to know how long a thing will take, we are tempted to estimate in
units of time.
As we want to assure that the estimates are as accurate as possible, we are tempted
to estimate in small chunks.
So we commonly take large work efforts, break them down into tasks, and estimate
each task in hours.
We then add the tasks together and, viola, we have an accurate estimate.
Right?

Hours too granular?
Estimate in days.

Not sure what is meant by a day; duration or effort?
Estimate in ideal days - the time it would take if you were able to work at a
consistent pace uninterrupted (because that happens).

Now do some work and measure the duration, or maybe even the effort.
And then compare the estimate against the actual.
If the estimate was wrong, figure out why and learn from it.
Follow this process and over time, your estimates will get better.

Only here's the thing.
What you'll discover, time and again, is that what causes work to go over the time
estimate is the unknown.
And what will cause work to complete under the time estimate is the unknown.
The unknown being things you figured out or discovered while in the process of
actually doing the work.

Maybe it turns out that you need to make a change to a class that is written in
a convoluted way and doesn't have tests around the functionality you desire,
turning a 1 day task into 3 days.
Maybe it turns out that there is a library that does what you need and you can wire
it in with very little effort, solving what you thought was going to take days in
hours.
Maybe, while you're working on the problem, you realize a much more elegant way
to do it that makes the code more stable, more efficient, and easier to maintain.

So what you need to get better at is anticipating the unknown and working that
into your estimates.
Let me repeat that - you need to get better at estimating the effort required to
complete the unknown.
Here is a box of parts for a desk you've never before assembled.
It is similar in look and feel to other desks you've assembled in the past.
Here is a photo of the finished desk.
Before you open the box, tell me how long in hours it will take you to assemble
the desk.

Your estimate was off because some of the "parts" were sheet metal, a smelter,
and a set of molds?
Hmmm.
You clearly should have anticipated the unknown.
Do better next time.

Your estimate was off because in the box was a pre-assembled mini desk?
Hmmm.
You clearly should have anticipated the unknown.
Do better next time.

Your estimate was off because some of the parts were damaged and needed to be
repaired?
Hmmm.
You clearly should have anticipated the unknown.
Do better next time.


Estimates have been a contentious topic for a long time.
There are those that claim that accurately estimating the time it will take to
complete a development task is entirely possible.
For these folks, the ability to provide accurate estimates is a sign of true
professionalism.

There are those that claim that accurately estimating the time it will take to
complete a development task is statistically impossible.
For these folks, claiming one can provide accurate estimates is a sign of a
lack of real-world experience.




Estimates.
Do we even need them?

To many, this seems a ridiculous question.
You can't plan if you don't have estimates, right?
You can't decide if a project should be started until you know the cost and you
can't know the cost until you know the duration and you can't know the duration
until you estimate how long the steps will take.
It's logical.

So we estimate.

Here's a thing you've never done before.
But it's similar to other things you've done.
It's relatively easy to explain and I've provided you pictures of what the
completed item should look like.
I've even described it's desired behavior.
You're a professional, right?
I mean you're at least competent, aren't you?
Then you should have no problem telling me how long it will take you to complete.
By the way, I need your best estimate.
Best being defined as lowest.






Estimates are a funny thing.
Not funny like a good joke, but funny like strange and hard to explain.



I mean, the concept itself is simple.
Given a task to do, say driving to work, take a guess at how long it will take.
You've done this before, right?
So you are making an informed guess; an educated guess.
Now drive to work for a week.
If your drive time is not exactly the same every day, set aside at least an hour
to contemplate why your drive times differed and how you can get better at it
next time.
You're an experienced drive yourself to worker, you should be able to estimate it
accurately.
Try harder.


Using days as points.
tying estimates to time.
If you mean scrum, using hours as points.
