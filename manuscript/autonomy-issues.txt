### Lack of Autonomy

Autonomy is the capacity to make an informed and uncoerced decision.
As related to individuals at work, it means people have a high level of discretion in how they perform the work.
When we speak of self-governing teams, we are speaking of autonomous teams; teams that hold the right to make their own decisions without being controlled by anyone else.

In agile software development, principals five and eleven speak directly to autonomy:

{icon=exclamation-circle}
G> Build projects around motivated individuals. Give them the environment and support they need, and *trust them to get the job done*.
G>
G> The best architectures, requirements, and designs emerge from *self-organizing* teams.

Organizations want the agile.
It is good.
They nod their heads when we say things like, "Self-governing teams", and, "Autonomous teams".

And then they put in centralized governance, controls, and approvals.
They mandate that all teams use the same tracking software; ideally in the same way.
They mandate standard reports which in turn require standard process.
They mandate standard approved tools, languages, and frameworks.
They require specific stage gates and checks, which by their very existence require teams to adhere to specific ways of working.
A team writing automated acceptance criteria still has to have their use cases documented via the corporate template and approved before the official testing phase can begin, which must come ofter the development phase.

Hello? What?

This is not autonomy.

This is heteronomy: The subjection of a community to the rule of another power.

There is benefit to having some standards.
No doubt.
But there is additionally benefit to eliminating any and all standards that fail to continue to serve the best interest of the organization.
There is benefit to reducing policy from a strict set of steps to a set of fundamental guidelines.

Rather than mandate a process for how tests are written and executed, set a guideline that states all teams need to have and follow an approved testing strategy.

Rather than mandating iterations, velocity, and the like, set a guideline that states all team need to manage the flow of work and be able to respond to change.

Create constraints that reduce options, but simultaneously empower the team.
"No code can move into the master branch until three people have seen it.", is a simple enabling constraint.
It is clear that no one person can write code alone and push it into master.
But this constraint is also quite empowering.
Teams get to decide for themselves how they'll do this.
Maybe they mob so three or more people write all the code.
Maybe they pair and ask for a review.
Maybe they do formal code reviews.
Maybe they use pull requests.
Maybe they use combinations of all of the above.

#### Big Agile and Autonomy
Welcome to Big Corp.
We are excited to have you join us as a senior software engineer.
You will be delighted to learn that we have adopted a scaled agile framework which allows us to run a very efficient agile organization.

As a member of a self-governing, autonomous, two-pizza sized, full-stack, devOps, self-contained, design to delivery squad, you will have the freedom and flexibility to execute on the work as you see fit within corporate approved standards.

Your team will be assigned tasks to execute with clear requirements written in Given/When/Then format.
Here's an example task from our warehouse management team's backlog:

A> **Title:** Add receiving hours to dock.  
A> **Promise Date:** In two weeks  
A> **Description:**  
A>     In order to open and close the dock  
A>     As a receiving manager  
A>     I want to set receiving hours for a dock  
A> **Details:**  
A>     Given I set receiving open for dock 3 to 6am  
A>     When it is 6am  
A>     Then dock 3 is open  
A>     [Many more details here]...  

As you can see, we are following all the agile best practices for our tasks.

Now, tasks are always tied to stories.
Your supervisor will work with the department integration team to define the stories.
Stories are tied to Features, which help your supervisor know what is expected of the team.
Managers, as members of the product steering team, are responsible for defining the features.
Features are a breakdown of the Epics, which are defined by Directors.
Those Epics are driven by Initiatives which the Vice Presidents design to support the Themes our Executives have laid out for the next 18 months.

Supervisors and Managers manage the dependencies across the squads.

***Ew.***

This is hierarchical oppression in autonomous agile clothing.

This task is almost entirely removed from the actual problem we are trying to solve.
Sure, we are supposed to add receiving hours to a dock, but why?
Because our dock configuration is missing receiving hours?
That sounds like a lack of solution rather than an un-resolved issue.

This team is not likely to understand why they are doing what they are doing.
They are essentially taking implementation orders and executing them.
The company is losing out on an opportunity to leverage the creativity and knowledge of this team.
By the time the people who do the work pick up an item, everything is detailed for them.
Devoid of context and real understanding with a list of tasks to execute, the team has little to no real autonomy.

The business problems are opaque to the team.
The team's creativity is stifled.
And the company loses out on the team's knowledge and insights.

Let's take a look at this one task.

Why do we need receiving hours for a dock?  
*So that we know when the dock is actively receiving.*

Why do we need to know when the dock is actively receiving?  
*Because the nightly batch to update inventory needs to run after the dock closes.*

Why?  
*Because the batch update is currently scheduled for 9pm and sometimes the docks are not done processing received inventory, which messes up numbers for the morning reports and throws off fulfillment calculations.*

How does knowing dock receiving hours solve this problem?  
*If we know when the dock closes, we can figure out when to run the nightly batch.*

How would you do that?  
*We will run batch one hour after dock closing.*

Does a dock always complete receipt processing within one hour from closing?  
*Not if it was a busy day, they get backed up, or there is a large late shipment.*

So, don't we want to know when a dock has completed receipt processing rather than what their hours are?  
*Umm... yeah...*

As it turns out, adding the ability to indicate a dock is done with receipt processing and notifying the nightly batch process is about one half day of work.
This is assuming someone on the dock is willing to indicate when receipt processing is done by pressing a button on a screen.
Whereas adding new fields to the database to record start and end, updating the maintenance screens, and configuring the down-stream processes to respect dock hours is a few weeks.
Not only does the new solution actually solve the business problem in a more flexible and effective way, but it costs far less to build and maintain.

When we distance the team from the business and the actual customers through layers on management, we lose out on many of the opportunities to discover even better solutions, such as the one detailed above.

In addition to all this, these layers of theme to initiative to epic to feature to story to task create another serious issue.
The organization has reduced their ability to respond quickly to change.
It takes weeks, if not months for information learned on the front lines at the task level to have an impact on the associated epics and then cascade back down to the tasks through features and stories.
This is assuming the information ever makes its way to Directors.

Since the teams don't clearly know what business problem they are trying to solve, once a task is implemented, they need to scurry to the next one in order to meet the deadline.
No need to look at data or confirm we've achieved the goal.
We're done here.
Task complete.
Check.

Because critical business information isn't understood or gathered at the team level, there is the long delay in getting feedback from users to Directors through indirect means that don't involve the team.
By the time Directors realize the need for a change and that change cascades down through the organization, teams have implemented a bunch of tasks that either need to be rolled back, significantly modified, or perhaps simply offer less value than the value that could have been realized.

Remove the layers of minutia.
You probably don't need five work item layers.
You maybe need two, possibly three.
And do your best to always articulate the why of a story over the what.
Help the team understand the business problem they are solving as well as they understand the proposed solution.
