## Demand for Higher Velocity

This is far and away, the most common Velocity Anti-Pattern, and quite possibly
the most harmful.
It manifests itself in a number of differing fashions, but the basics are the same:
Somebody determines that the team needs to get more done in less time.
This person is usually an authority figure and typically doesn't do the actual
work being asked of the team.

### Why we need more velocities

In some cases, the need for higher velocity is based on a set scope for a set date
and some basic (but significantly flawed) math.
Take a team's average velocity and divide it into the total of known work to be
done.
If the number of weeks to complete the work exceed the number of weeks between
now and the deadline, then the team needs to get more done in less time.

In other cases, the need for higher velocity is observed.
The team can be seen "loafing".
There are times where nobody is actively writing code.
There are times where more than one individual is working on the same basic
piece of work at a given time.
Sometimes, we can even see two people working at the same computer at the same
time.
Not everybody punches in at 8am and out again at 6pm.
Some people don't eat lunch at their desks.
And who knows what people are actually doing when they "work from home?"
This team can clearly move faster - we just need to give them a little push.

And in other cases, the need for higher velocity is borne of expectation.
Everybody knows that when a team goes agile, they get faster.
It's a fact.
It has been written in numerous agile books, especially books on scrum.
Hell, I just wrote it in this book.
So it must be true.
And if it is true that teams get faster, all we need to do is help them get there.

These are but a few of any number of reasons why we might expect or "need" the
team to move faster.
This thinking is, unsurprisingly, flawed.
Velocity is not about measuring the team.
It is about having a course-grain forecast.
Rather than a tool to rate and push a team, it is a tool to help make key
business decisions.
Which features can we cut back on?
What is truly priority?
How else might we organize the work, support the team, or think about the product?

Unfortunately, these are hard decisions.
They may force us to make tradeoffs.
They may result in our having to change our public message; to move a date
or to reset market expectations.
It is far easier to defer the hard decision and ask a team to "step up".
It is easier to abdicate the responsibility and push it to the team.

In most cases where the need for an increase in velocity is articulated, there
is an underlying unspoken premise.
The belief that if properly motivated, we can do better.
Re-phrased, the belief that we are not already operating at our best.

**Given** we need to hit a deadline with a set scope

**When** the team is not moving fast enough to achieve the desired outcome

**Then** the team is capable of moving faster.

This is logically flawed.

### Attempts to entice more velocities

Leaders (and teams) attempt to achieve velocity increases in numerous ways.

#### Increase Awareness

The number one motivational technique is simply to increase awareness.
We make the team acutely aware of the deadline, the desired scope, and how near
or far they are to hitting the target.
This is a simple and passive technique.
The idea here is that if people know what is required, they will rise to the
occasion.

Burn down charts and burn up charts are a common technique for showing the team
how they are doing within an iteration or towards a release.

Seemingly benign, this approach invokes the [Hawthorn Effect](#hawthorn-effect),
which practically guarantees the measurement will improve, but does not guarantee
the overall results will improve.

#### Velocity Goals

So we've shown the team how they are doing.
We gave them the burn charts and they still didn't go fast enough.
What is a good ScrumMaster to do?
Well, help them with the math, of course.

"Hey team. We can see that our burn chart is looking less than ideal. If we want
to hit our deadline - and we *do* want to hit our deadline - it looks like we're
going to need to increase our average velocity from 22 to 26 as soon as you can.
Whaddya say? Can we count on you to work smarter, not harder?"

This, of course, isn't the only way targets are set.
Some managers take a more dictatorial approach.

"Okay team. I didn't want to have to do this, but you people can't seem to
figure it out on your own. So much for 'self organizing'. Your velocity sucks.
I've looked at your burn chart and you can't possibly make it. Effectively
immediately, velocity must increase to 26 points. I don't want to hear any
whining. You've been lallygagging long enough. Now get back to work."

The language is different, but the intent is the same and the end result is likely
the same.
Velocity will very likely go up.
And again, this does not mean the end result will improve.

In fact, what happens is that we've now invoked [Goodhart's Law](#goodharts-law).
In setting a target for a lagging indicator in an attempt to control the system,
what has actually happened is we've changed the system, thereby changing what
the indicator means.
As a result, the measurement is no longer the same as the
measurement we were using before and the target doesn't mean what the manager
thinks it means.

It is intriguing to me how often a manager will make a change such as this to a
system of work and then later proclaim that the team is gaming the system.
This is simply not the case.
In fact, the gaming of the system is the improper application of targets or goals
for lagging indicators.
The rest is just natural consequence.


#### Rewards
"Developers who complete an average of 13 story points will receive a Meets Expectations on their performance review"
"Developers who completes an average of 18 story points will receive a Exceeds Expectations on their performance review"
rewarding teams for increased velocity


### Attempts to show more velocities

#### Inflating Points

#### Splitting Points

Changing points so you can have higher velocity
story point bloating because more is better.
"you need to increase velocity x% or else miss the deadline"



Hearing from a PM that, after a few iterations, a team "needs to get their velocity up" to ship everything on the planned date.
